package com.future.curator;import org.apache.curator.framework.CuratorFramework;import org.apache.curator.framework.CuratorFrameworkFactory;import org.apache.curator.framework.state.ConnectionState;import org.apache.curator.framework.state.ConnectionStateListener;import org.apache.curator.retry.RetryNTimes;/** * @Description: * @Author: lilei58 * @Date: Created in 2021/11/24 上午7:40 * * client ---!---> server(session) * 断掉之后 session 会过期,过期之后,网络恢复,客户端会重新连接 * 临时节点以及 Watcher 都会被清除掉,因为临时节点以及 Watcher 都是和 Session 绑定到一起的 */public class CuratorSessionExample {    public static void main(String[] args) {        // 客户端        CuratorFramework client = CuratorFrameworkFactory.newClient("localhost:2181", 1000, 1000, new RetryNTimes(3, 1000));        client.start();        /**         * 连接状态有改变是触发操作         * 执行任务 doTask() 过程中发现网络断掉了,那么重新发起阻塞式的连接,直到任务连接成功之后继续执行 doTask()         */        client.getConnectionStateListenable().addListener(new ConnectionStateListener() {            @Override            public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {                // 状态为丢失状态                if (connectionState == ConnectionState.LOST) {                    try {                        // 拿到zk状态【getZookeeperClient】, 重新连接【blockUntilConnectedOrTimedOut】                        if (client.getZookeeperClient().blockUntilConnectedOrTimedOut()) {                            System.out.println("重新连接成功");                            doTask();                        }                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }            }        });        doTask();    }    /**     * 任务处理     */    private static void doTask() {    }}