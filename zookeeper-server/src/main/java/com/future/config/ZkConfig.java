package com.future.config;import org.apache.curator.framework.CuratorFramework;import org.apache.curator.framework.CuratorFrameworkFactory;import org.apache.curator.framework.recipes.cache.PathChildrenCache;import org.apache.curator.framework.recipes.cache.PathChildrenCacheEvent;import org.apache.curator.framework.recipes.cache.PathChildrenCacheListener;import org.apache.curator.retry.RetryNTimes;import org.apache.zookeeper.CreateMode;import org.apache.zookeeper.data.Stat;import java.util.*;/** * @Description: * @Author: lilei58 * @Date: Created in 2022/1/6 上午7:26 */public class ZkConfig {    private Map<String, String> cacheMap = new HashMap<>();    private CuratorFramework curator;    private static final String CONFIG_PREFIX = "/CONFIG";    public ZkConfig() {        this.curator = CuratorFrameworkFactory.newClient("localhost:2181", new RetryNTimes(3, 1));        curator.start();        init();    }    public void init() {        try {            // 获取子节点            List<String> childNameList = curator.getChildren().forPath(CONFIG_PREFIX);            for (String childName : childNameList) {                // 获取子节点对应的value                String value = new String(curator.getData().forPath(CONFIG_PREFIX + "/" + childName));                // 存入缓存中                cacheMap.put(childName, value);            }            // 绑定监听器            PathChildrenCache watcher = new PathChildrenCache(curator, CONFIG_PREFIX, true);            watcher.getListenable().addListener((client, event) -> {                // 获取全路径                String path = event.getData().getPath();                if (path.startsWith(CONFIG_PREFIX)) {                    // 获取子节点名称                    String key = path.replace(CONFIG_PREFIX + "/", "");                    if (PathChildrenCacheEvent.Type.CHILD_ADDED.equals(event.getType())                            || PathChildrenCacheEvent.Type.CHILD_UPDATED.equals(event.getType())) {                        cacheMap.put(key, new String(event.getData().getData()));                    } else if (PathChildrenCacheEvent.Type.CHILD_REMOVED.equals(event.getType())) {                        cacheMap.remove(key);                    }                }            });            watcher.start();        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * 保存/更新     *     * @param name     * @param value     */    public void save(String name, String value) {        try {            // 存储节点路径            String configFullName = CONFIG_PREFIX + "/" + name;            // 判断是否存在            Stat stat = curator.checkExists().forPath(configFullName);            // 不存在            if (Objects.isNull(stat)) {                // 插入                curator.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(configFullName, value.getBytes());            }            // 存在            else {                // 更新                curator.setData().forPath(configFullName, value.getBytes());            }            // 存储到缓存            cacheMap.put(name, value);        } catch (Exception e) {            e.printStackTrace();        }    }    public String get(String name) {        // 直接从缓存中获取数据        return cacheMap.get(name);    }}